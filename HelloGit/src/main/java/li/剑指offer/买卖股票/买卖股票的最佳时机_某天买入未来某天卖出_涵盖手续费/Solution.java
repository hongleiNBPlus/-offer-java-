package li.剑指offer.买卖股票.买卖股票的最佳时机_某天买入未来某天卖出_涵盖手续费;

/**
 * 题目：给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
 * 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
 * 返回获得利润的最大值。
 * 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
 *
 * 第 1 步：状态定义
 * dp[i][j] 表示：[0, i] 区间内，到下标为 i 这一天天（从 0 开始）状态为 j 时的我们手上拥有的现金数；
 * 其中 j 取两个值：0 表示不持股，1 表示持股。
 *
 * 第 2 步：推导状态转移方程：
 * dp[i][0]：当天不持股，可以由昨天不持股和昨天持股转换而来。
 *
 * 如果昨天不持股，今天仍然不持股，则说明今天什么都没做。
 * 如果昨天持股，今天不持股，则说明今天卖出了一股，当前的 dp 应该加上当天的股价。
 * 因此：dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
 *
 * dp[i][1]：当天持股，也可以由昨天不持股和昨天持股转换而来。
 *
 * 如果昨天不持股，今天持股，则说明今天买入股票，根据我们之前的规定，需要扣除手续费。
 * 如果昨天持股，今天仍然持股，则说明今天什么都没做。
 * 因此：dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i] - fee);。
 *
 * 第 3 步：思考初始化
 * 在下标为 00 这一天，不持股的初始化值为 00，持股的初始化值为 -prices[0] - fee（规定在买入股票的时候扣除手续费）。
 *
 * 第 4 步：思考输出
 * 每一天都由前面几天的状态转换而来，最优值在最后一天，并且是不持股的状态。
 *
 */
public class Solution {
    public int maxProfit(int[] prices, int fee) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }

        // j = 0 表示不持股，j = 1 表示持股
        // 并且规定在买入股票的时候，扣除手续费
        int[] dp = new int[2];
        dp[1] = -prices[0] - fee;
        for (int i = 1; i < len; i++) {
            dp[0] = Math.max(dp[0], dp[1] + prices[i]);
            dp[1] = Math.max(dp[1], dp[0] - prices[i] - fee);
        }
        return dp[0];
    }
}
