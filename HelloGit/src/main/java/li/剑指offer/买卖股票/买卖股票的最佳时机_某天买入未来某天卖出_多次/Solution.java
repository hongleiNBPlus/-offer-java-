package li.剑指offer.买卖股票.买卖股票的最佳时机_某天买入未来某天卖出_多次;

/**
 * 题目：买卖股票的最佳时机_某天买入未来某天卖出
 * 限制条件:
 *         条件 1：你不能在买入股票前卖出股票；
 *         条件 2：允许完成多次笔交易。
 *         条件3：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 思路：动态规划：
 * dp[i][j]：下标为 i 这一天结束的时候，手上持股状态为 j 时，我们持有的现金数。
 * j = 0，表示当前不持股；
 * j = 1，表示当前持股。
 *
 * dp[i][0]：规定了今天不持股，有以下两种情况：
 * 1、昨天不持股，今天什么都不做；
 * 2、昨天持股，今天卖出股票（现金数增加）
 *
 * dp[i][1]：规定了今天持股，有以下两种情况：
 * 1、昨天持股，今天什么都不做（现金数与昨天一样）；
 * 2、昨天不持股，今天买入股票
 *
 */
public class Solution {
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len <  2) return 0;
        int[][] dp = new int[len][2];

        // dp[i][0] 下标为 i 这天结束的时候，不持股，手上拥有的现金数
        // dp[i][1] 下标为 i 这天结束的时候，持股，手上拥有的现金数

        // 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价
        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        for (int i = 1; i < len; i++) {
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i-1][1],  dp[i-1][0]-prices[i]);
        }
        return dp[len - 1][0];
    }
}