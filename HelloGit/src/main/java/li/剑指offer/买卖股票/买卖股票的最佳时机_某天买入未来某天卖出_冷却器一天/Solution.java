package li.剑指offer.买卖股票.买卖股票的最佳时机_某天买入未来某天卖出_冷却器一天;

/**
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 *
 * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 *
 * 思路：
 * 第 1 步：状态定义
 * dp[i][j] 表示 [0, i] 区间内，在下标为 i 这一天状态为 j 时，我们手上拥有的金钱数。
 * 这里 j 可以取 3 个值（下面的定义非常重要）：
 * 0 表示：非冷冻期的不持股状态；
 * 1 表示：持股；
 * 2 表示：冷冻期的不持股状态；
 *
 * 第 2 步：推导状态转移方程
 * j = 0：
 * 0	0	可以转移，今天什么都不做。
 * 0	1	可以转移，今天买入股票。
 * 0	2   不可以转移，不持股的情况下，不能卖出股票。
 *
 * j = 1：
 * 1	0	不可以转移，根据题意，只能转移到 22。
 * 1	1	可以转移，今天什么都不操作。
 * 1	2   根据题意可以转移。
 *
 * j = 2：
 * 2	0	可以转移，根据题意，今天就是冷冻期，什么都不能操作，进入状态 00。
 * 2	1	不可以转移，根据题意，昨天刚刚卖出股票，今天不能执行买入操作。
 * 2	2	不可以转移，不持股的情况下，不能卖出股票。
 *
 */
public class Solution {

    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }

        int[][] dp = new int[len][3];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        dp[0][2] = 0;

        // dp[i][0]: 手上不持有股票，并且今天不是由于卖出股票而不持股，我们拥有的现金数
        // dp[i][1]: 手上持有股票时，我们拥有的现金数
        // dp[i][2]: 手上不持有股票，并且今天是由于卖出股票而不持股，我们拥有的现金数
        for (int i = 1; i < len; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            dp[i][2] = dp[i - 1][1] + prices[i];
        }
        return Math.max(dp[len - 1][0], dp[len - 1][2]);
    }
}

